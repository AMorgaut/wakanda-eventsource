var	BASE_PATH,	WORKER_PATH,	WORKER_ID;function ServerSentEvent(type, message) {	this.type = type;	this.data = message;	this.send = function send(asJSON) {		var sseMgr = new SharedWorker(WORKER_PATH, WORKER_ID);		sseMgr.port.postMessage({type:ServerSentEvent.SEND_DATAS, data:this.toString(asJSON)});	};};ServerSentEvent.prototype.toString = function toString(asJSON) {	var message = "";	if (this.type !== undefined) {		if (this.type == ServerSentEvent.COMMENT) {			// a comment will just keep the connection alive			// but will not be fired as an event on client side			message += "; comment to be sent \n";		} else {			message += "event:" + this.type + "\n";		}	}	if (this.data != null) {		if (asJSON) {			message += "data:" + JSON.stringify(this.data) + "\n\n";		} else {			message += "data:" + this.data.toString() + "\n\n";		}	}	return message;};BASE_PATH = module.id.substr(0, module.id.lastIndexOf('index'));WORKER_PATH = BASE_PATH + "workers/ServerSentEventManager.js";WORKER_ID = "wakanda-eventsource"ServerSentEvent.SEND_DATAS = "sendDatas";ServerSentEvent.COMMENT = "comment_to_be_send_to_keep_the_connection_alive";exports.ServerSentEvent = ServerSentEvent;exports.start = function () {	application.addHttpRequestHandler("/serverEvents", "serverSentEventsHandler.js", "sendServerEvents");};exports.restart = function () {	application.removeHttpRequestHandler("/serverEvents", "serverSentEventsHandler.js", "sendServerEvents");	application.addHttpRequestHandler("/serverEvents", "serverSentEventsHandler.js", "sendServerEvents");};exports.stop = function () {	application.removeHttpRequestHandler("/serverEvents", "serverSentEventsHandler.js", "sendServerEvents");};exports.sendMessage = function sendMessage (type, message, asJSON) {	var temp = new ServerSentEvent(type, message);	temp.send();};