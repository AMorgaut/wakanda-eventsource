var	sse,	BASE_PATH;sse = exports;BASE_PATH = module.id.substr(0, module.id.lastIndexOf('index'));sse.WORKER_PATH = BASE_PATH + "workers/ServerSentEventManager.js";sse.WORKER_ID = "wakanda-eventsource";sse.PATTERN = "/serverEvents";sse.HTTP_HANDLER_PATH = "serverSentEventsHandler.js";sse.HTTP_HANDLER_NAME = "sendServerEvents";ServerSentEvent.SEND_DATAS = "sendDatas";ServerSentEvent.COMMENT = "comment_to_be_send_to_keep_the_connection_alive";function ServerSentEvent(type, message) {	this.type = type;	this.data = message;}ServerSentEvent.prototype.send = function send(asJSON) {	var		sseMgr;	sseMgr = new SharedWorker(sse.WORKER_PATH, sse.WORKER_ID);	sseMgr.port.postMessage({		type: ServerSentEvent.SEND_DATAS, 		data: this.toString(asJSON)	});};ServerSentEvent.prototype.toString = function toString(asJSON) {	var		message;	message = [];	if (this.type) {		if (this.type === ServerSentEvent.COMMENT) {			// a comment will just keep the connection alive			// but will not be fired as an event on client side			message.push("; comment to be sent ");		} else {			message.push("event:" + this.type);		}	}	if (this.data !== null) {		if (asJSON) {			message.push("data:" + JSON.stringify(this.data));		} else {			message.push("data:" + this.data.toString());		}		message.push('');	}	return message.join('\n');};sse.ServerSentEvent = ServerSentEvent;sse.start = function start() {	application.addHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);};sse.restart = function restart() {	sse.stop();	sse.start();};sse.stop = function stop() {	application.removeHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);};sse.sendMessage = function sendMessage (type, message, asJSON) {	var		temp;	temp = new ServerSentEvent(type, message);	temp.send();};