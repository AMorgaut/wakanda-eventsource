var	sse,	BASE_PATH,	EVENT,	DATA,	COMMENT,	EOL,	EOL2;sse = exports;BASE_PATH = module.id.substr(0, module.id.lastIndexOf('index'));EVENT = 'event: ';DATA = 'data: ';COMMENT = ': ';EOL = '\n';EOL2 = EOL + EOL;sse.WORKER_PATH = BASE_PATH + "eventSource-sharedWorker.js";sse.WORKER_ID = "wakanda-eventsource";sse.PATTERN = "/eventsource";sse.HTTP_HANDLER_PATH = BASE_PATH + "eventSource-httpHandler.js";sse.HTTP_HANDLER_NAME = "oneventsourceconnect";sse.CONNECTION_READY = "connectionready";sse.PUSH = "push";sse.COMMENT = COMMENT;sse.STOP = "stop"function ServerEvent(message, type) {	this.type = type;	this.data = message;}ServerEvent.prototype.send = function send(asJSON, isComment) {	if (!this.worker) {		this.worker = new SharedWorker(sse.WORKER_PATH, sse.WORKER_ID);	}	this.worker.port.postMessage({		type: sse.PUSH, 		message: this.toString(asJSON, isComment)	});};ServerEvent.prototype.toString = function toString(asJSON, isComment) {	var		message,		data;	data = this.data;	if (data) {		if (asJSON) {			// \n will be natively escaped by JSON.stringify() and restored by JSON.parse()			data = JSON.stringify(data);		} else {			// \n must be replaced for the textstream protocol by \ndata:			data = data.split(EOL).join(EOL + DATA);		}		data = DATA + data;	}	if (isComment) {		return COMMENT + this.data + EOL2;	}	type = this.type;	if (!type) {		// standard MessageEvent		return data + EOL2;	}	// specific Server Event	return EVENT + this.type + EOL + data + EOL2;};// PUBLIC APIsse.ServerEvent = ServerEvent;sse.start = function start() {	application.addHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);};sse.restart = function restart() {	sse.stop();	sse.start();};sse.stop = function stop() {	var		worker;	application.removeHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);	worker = new SharedWorker(sse.WORKER_PATH, sse.WORKER_ID);	worker.port.postMessage({type: 'stop'});};sse.push = function push(message, asJSON) {	var		temp;	temp = new ServerEvent(message);	temp.send(asJSON);};sse.pushEvent = function pushEvent(type, message, asJSON) {	var		temp;	temp = new ServerEvent(message, type);	temp.send(asJSON);};sse.pushComment = function pushEvent(comment, asJSON) {	var		temp;	temp = new ServerEvent(comment);	temp.send(asJSON, true);};