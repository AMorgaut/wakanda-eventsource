/** * @module wakanda-eventsource **/var	BASE_PATH,	EVENT,	DATA,	RETRY,	COMMENT,	EOL,	EOL2,	sse,	worker,	workerPort;BASE_PATH = module.id.substr(0, module.id.lastIndexOf('index'));ID = 'id: ';EVENT = 'event: ';DATA = 'data: ';RETRY = 'retry: ';COMMENT = ': ';EOL = '\n';EOL2 = EOL + EOL;/** * @class ServerEvent * @constructor * @param {mixed} message data to push * @param {string} [type] event type **/function ServerEvent(message, type) {	this.id = Date.now();	this.type = type;	this.data = message;}/** * @method send * @param {boolean} [asJSON] false by default. message is JSON encoded is set to true * @param {boolean} [isComment] false by default. message sent as a protocol level comment **/ServerEvent.prototype.send = function send(asJSON, isComment) {	workerPort.postMessage({		id: this.id,		type: sse.PUSH, 		message: this.toString(asJSON, isComment)	});};/** * Convert a server event into an eventstream compliant string * * @method toString * @param {boolean} [asJSON] false by default. message is JSON encoded is set to true * @param {boolean} [isComment] false by default. message sent as a protocol level comment **/ServerEvent.prototype.toString = function toString(asJSON, isComment) {	var		id,		data,		type;	id = ID + this.id + EOL;	data = this.data;	if (data) {		if (asJSON) {			// \n will be natively escaped by JSON.stringify() and restored by JSON.parse()			data = JSON.stringify(data);		} else {			// \n must be replaced for the textstream protocol by \ndata:			data = String(data).split(EOL).join(EOL + DATA);		}		data = DATA + data;	}	if (isComment) {		return COMMENT + this.data + EOL2;	}	type = this.type;	if (!type) {		// standard MessageEvent		return id + data + EOL2;	}	// specific Server Event	return id + EVENT + this.type + EOL + data + EOL2;};// PUBLIC API/** * @class WakandaEventsourceModule **/sse = exports;/** * @property WORKER_PATH * @type string **/ sse.WORKER_PATH = BASE_PATH + "eventSource-sharedWorker.js";/** * @property WORKER_ID * @type string * @default "wakanda-eventsource" **/ sse.WORKER_ID = "wakanda-eventsource";/** * @property PATTERN * @type string * @default "/eventsource" **/ sse.PATTERN = "/eventsource";/** * @property HTTP_HANDLER_PATH * @type string **/ sse.HTTP_HANDLER_PATH = BASE_PATH + "eventSource-httpHandler.js";/** * @property HTTP_HANDLER_NAME * @type string * @default "oneventsourceconnect" **/ sse.HTTP_HANDLER_NAME = "oneventsourceconnect";/** * @property CONNECTION_READY * @type string * @default "connectionready" **/ sse.CONNECTION_READY = "connectionready";/** * @property PUSH * @type string * @default "push" **/ sse.PUSH = "push";/** * @property COMMENT * @type string * @default ": " **/ sse.COMMENT = COMMENT;/** * @property EOL * @type string * @default "\n" **/ sse.EOL = EOL;/** * @property STOP * @type string * @default "stop" **/ sse.STOP = "stop";worker = new SharedWorker(sse.WORKER_PATH, sse.WORKER_ID);workerPort = worker.port;/** * ServerEvent constructor * * @property ServerEvent * @type function **/ sse.ServerEvent = ServerEvent;/** * @method start **/ sse.start = function start() {	application.addHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);};/** * @method restart **/ sse.restart = function restart() {	sse.stop();	sse.start();};/** * @method pause * @param {number} delay **/ sse.pause = function pause(delay) {	application.removeHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);	setTimeout(function () {		application.addHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);	}, delay);	workerPort.postMessage({		type: sse.PUSH,		message: RETRY + Number(delay)	});};/** * @method stop **/ sse.stop = function stop() {	application.removeHttpRequestHandler(sse.PATTERN, sse.HTTP_HANDLER_PATH, sse.HTTP_HANDLER_NAME);	workerPort.postMessage({type: 'stop'});};/** * @method push * @param {mixed} message data to push * @param {boolean} [asJSON] **/ sse.push = function push(message, asJSON) {	var		temp;	temp = new ServerEvent(message);	temp.send(asJSON);};/** * @method pushEvent * @param {string} type event type * @param {mixed} message data to push * @param {boolean} [asJSON] **/ sse.pushEvent = function pushEvent(type, message, asJSON) {	var		temp;	temp = new ServerEvent(message, type);	temp.send(asJSON);};/** * @method pushComment * @param {mixed} comment to push * @param {boolean} [asJSON] **/ sse.pushComment = function pushEvent(comment, asJSON) {	var		temp;	temp = new ServerEvent(comment);	temp.send(asJSON, true);};