var	sse;sse = require("wakanda-eventsource");function push(message, nowait) {    // We send the chunk that needs to be send now    connection.sendChunkedData(message);	// For now, we need to release the wait for the response to be sent    application.exitWait();    if (!nowait) {		// We wait again for the next datas    	wait();	}}function pushComment(comment, nowait) {	push(': ' + comment + '\n', nowait);}function oneventsourceconnect(httpRequest, httpResponse) {	var		connection,		workerPort;	connection = httpResponse;	// Specify that we'll send server events	httpResponse.contentType = "text/event-stream";	workerPort = new SharedWorker(sse.WORKER_PATH, sse.WORKER_ID).port;	workerPort.onmessage = function onmessage(event) {		var			data;		data = event.data;        switch (data.type) {        case sse.PUSH:	        push(data.message)            break;		case sse.CONNECTION_READY:            // Send a comment - not mandatory - just to make it clear	        pushComment('connection ready');			break;		case sse.STOP:			// we can end the HTTP connection	        pushComment('event source stop', true);			break;		default:			console.warning('unexpected worker message', data);        }	};	// We register to tell to the SharedWorker to send us the message when it's fired	workerPort.postMessage({type: "register"});	// Wait to keep the context alive	wait();}